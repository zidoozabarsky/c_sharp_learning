# m3-2

```
private async void Search_Click(object sender, RoutedEventArgs e)
{
    try
    {
        BeforeLoadingStockData();

        await Task.Run(() => { 
            var lines = File.ReadAllLines("StockPrices_Small.csv");

            var data = new List<StockPrice>();

            foreach (var line in lines.Skip(1))
            {
                var price = StockPrice.FromCSV(line);

                data.Add(price);
            }

            Dispatcher.Invoke(() => { 
                Stocks.ItemsSource = data.Where(sp => sp.Identifier == StockIdentifier.Text);
            });
        });
    }
    catch (Exception ex)
    {
        Notes.Text = ex.Message;
    }
    finally
    {
        AfterLoadingStockData();
    }
}
```

# m3-3

```
private void Search_Click(object sender, RoutedEventArgs e)
{
    try
    {
        BeforeLoadingStockData();

        var loadLinesTask = Task.Run(() => { 
            var lines = File.ReadAllLines("StockPrices_Small.csv");

            return lines;
        });

        var processStocksTask =
            loadLinesTask.ContinueWith((completedTask) => {
            var lines = completedTask.Result;

            var data = new List<StockPrice>();

            foreach (var line in lines.Skip(1))
            {
                var price = StockPrice.FromCSV(line);

                data.Add(price);
            }

            Dispatcher.Invoke(() => {
                Stocks.ItemsSource = data.Where(sp => sp.Identifier == StockIdentifier.Text);
            });
        });

        processStocksTask.ContinueWith(_ => {
            Dispatcher.Invoke(() => {
                AfterLoadingStockData();
            });
        });
    }
    catch (Exception ex)
    {
        Notes.Text = ex.Message;
    }
    finally
    {
        
    }
}
```


# m3-4

```
private void Search_Click(object sender, RoutedEventArgs e)
{
    try
    {
        BeforeLoadingStockData();

        var loadLinesTask = Task.Run(async () => { 
            using(var stream = new StreamReader(File.OpenRead("StockPrices_Small.csv")))
            {
                var lines = new List<string>();

                string line;
                while((line = await stream.ReadLineAsync()) != null)
                {
                    lines.Add(line);
                }

                return lines;
            }
        });

        var processStocksTask =
            loadLinesTask.ContinueWith((completedTask) => {
            var lines = completedTask.Result;

            var data = new List<StockPrice>();

            foreach (var line in lines.Skip(1))
            {
                var price = StockPrice.FromCSV(line);

                data.Add(price);
            }

            Dispatcher.Invoke(() => {
                Stocks.ItemsSource = data.Where(sp => sp.Identifier == StockIdentifier.Text);
            });
        });

        processStocksTask.ContinueWith(_ => {
            Dispatcher.Invoke(() => {
                AfterLoadingStockData();
            });
        });
    }
    catch (Exception ex)
    {
        Notes.Text = ex.Message;
    }
    finally
    {
        
    }
}
```

# m3-5
```
private void Search_Click(object sender, RoutedEventArgs e)
{
    try
    {
        BeforeLoadingStockData();

        var loadLinesTask = Task.Run(async () => { 
            using(var stream = new StreamReader(File.OpenRead("StockPrices_Small.csv")))
            {
                var lines = new List<string>();

                string line;
                while((line = await stream.ReadLineAsync()) != null)
                {
                    lines.Add(line);
                }

                return lines;
            }
        });

        loadLinesTask.ContinueWith(t =>
        {

            Dispatcher.Invoke(() =>
            {
                Notes.Text = t.Exception.InnerException.Message;
            });

        }, TaskContinuationOptions.OnlyOnFaulted);

        var processStocksTask =
            loadLinesTask
            .ContinueWith((completedTask) =>
            {
                var lines = completedTask.Result;

                var data = new List<StockPrice>();

                foreach (var line in lines.Skip(1))
                {
                    var price = StockPrice.FromCSV(line);

                    data.Add(price);
                }

                Dispatcher.Invoke(() =>
                {
                    Stocks.ItemsSource = data.Where(sp => sp.Identifier == StockIdentifier.Text);
                });
            },
            TaskContinuationOptions.OnlyOnRanToCompletion
        );

        processStocksTask.ContinueWith(_ =>
        {
            Dispatcher.Invoke(() =>
            {
                AfterLoadingStockData();
            });
        });
    }
    catch (Exception ex)
    {
        Notes.Text = ex.Message;
    }
    finally
    {
        
    }
}
```

# m3-6
```
CancellationTokenSource cancellationTokenSource;

private void Search_Click(object sender, RoutedEventArgs e)
{
    if(cancellationTokenSource != null)
    {
        // Already have an instance of the cancellation token source?
        // This means the button has already been pressed!

        cancellationTokenSource.Cancel();
        cancellationTokenSource = null;

        Search.Content = "Search";
        return;
    }

    try
    {
        cancellationTokenSource = new CancellationTokenSource();

        cancellationTokenSource.Token.Register(() => {
            Notes.Text = "Cancellation requested";
        });


        Search.Content = "Cancel"; // Button text

        BeforeLoadingStockData();

        var loadLinesTask = 
            SearchForStocks(cancellationTokenSource.Token);

        loadLinesTask.ContinueWith(t =>
        {

            Dispatcher.Invoke(() =>
            {
                Notes.Text = t.Exception.InnerException.Message;
            });

        },
            TaskContinuationOptions.OnlyOnFaulted);

        var processStocksTask =
            loadLinesTask
            .ContinueWith((completedTask) =>
            {
                var lines = completedTask.Result;

                var data = new List<StockPrice>();

                foreach (var line in lines.Skip(1))
                {
                    var price = StockPrice.FromCSV(line);

                    data.Add(price);
                }

                Dispatcher.Invoke(() =>
                {
                    Stocks.ItemsSource = data.Where(sp => sp.Identifier == StockIdentifier.Text);
                });
            },
            TaskContinuationOptions.OnlyOnRanToCompletion
        );

        processStocksTask.ContinueWith(_ =>
        {
            Dispatcher.Invoke(() =>
            {
                AfterLoadingStockData();

                cancellationTokenSource = null;

                Search.Content = "Search";
            });
        });
    }
    catch (Exception ex)
    {
        Notes.Text = ex.Message;
    }
    finally
    {
        
    }
}

private static Task<List<string>> 
    SearchForStocks(CancellationToken cancellationToken)
{
    return Task.Run(async () =>
    {
        using (var stream = new StreamReader(File.OpenRead("StockPrices_Small.csv")))
        {
            var lines = new List<string>();

            string line;
            while ((line = await stream.ReadLineAsync()) != null)
            {
                if(cancellationToken.IsCancellationRequested)
                {
                    break;
                }

                lines.Add(line);
            }

            return lines;
        }
    }, cancellationToken);
}
```

# m3-7

```
CancellationTokenSource cancellationTokenSource;

private async void Search_Click(object sender, RoutedEventArgs e)
{
    if(cancellationTokenSource != null)
    {
        // Already have an instance of the cancellation token source?
        // This means the button has already been pressed!

        cancellationTokenSource.Cancel();
        cancellationTokenSource = null;

        Search.Content = "Search";
        return;
    }

    try
    {
        cancellationTokenSource = new CancellationTokenSource();
        cancellationTokenSource.Token.Register(() => {
            Notes.Text = "Cancellation requested";
        });
        Search.Content = "Cancel"; // Button text

        BeforeLoadingStockData();

        var service = new StockService();

        var data = await service.GetStockPricesFor(StockIdentifier.Text, cancellationTokenSource.Token);
        Stocks.ItemsSource = data;
    }
    catch (Exception ex)
    {
        Notes.Text = ex.Message;
    }
    finally
    {
        AfterLoadingStockData();

        cancellationTokenSource = null;
        Search.Content = "Search";
    }
}
```